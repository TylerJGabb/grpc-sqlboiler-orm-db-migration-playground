// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: ChangeRequestService.proto

package crspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChangeRequestService_CreateTMTProject_FullMethodName           = "/crspb.ChangeRequestService/CreateTMTProject"
	ChangeRequestService_GetChangeRequest_FullMethodName           = "/crspb.ChangeRequestService/GetChangeRequest"
	ChangeRequestService_GetAllChangeRequests_FullMethodName       = "/crspb.ChangeRequestService/GetAllChangeRequests"
	ChangeRequestService_UpdateChangeRequest_FullMethodName        = "/crspb.ChangeRequestService/UpdateChangeRequest"
	ChangeRequestService_ReportPullRequestClosed_FullMethodName    = "/crspb.ChangeRequestService/ReportPullRequestClosed"
	ChangeRequestService_ReportDefaultBranchUpdated_FullMethodName = "/crspb.ChangeRequestService/ReportDefaultBranchUpdated"
	ChangeRequestService_ReportConflictResolved_FullMethodName     = "/crspb.ChangeRequestService/ReportConflictResolved"
	ChangeRequestService_UpdateRebaseJobStatus_FullMethodName      = "/crspb.ChangeRequestService/UpdateRebaseJobStatus"
	ChangeRequestService_UpdateTMTJobStatus_FullMethodName         = "/crspb.ChangeRequestService/UpdateTMTJobStatus"
	ChangeRequestService_GetTMTJob_FullMethodName                  = "/crspb.ChangeRequestService/GetTMTJob"
	ChangeRequestService_GetRebaseJob_FullMethodName               = "/crspb.ChangeRequestService/GetRebaseJob"
)

// ChangeRequestServiceClient is the client API for ChangeRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangeRequestServiceClient interface {
	// coming from clients, requesting things, via the BFFfs
	CreateTMTProject(ctx context.Context, in *CreateTMTProjectRequest, opts ...grpc.CallOption) (*CreateTMTProjectResponse, error)
	// general rpcs
	GetChangeRequest(ctx context.Context, in *GetChangeRequestRequest, opts ...grpc.CallOption) (*ChangeRequest, error)
	GetAllChangeRequests(ctx context.Context, in *GetAllChangeRequestsRequest, opts ...grpc.CallOption) (*ChangeRequestList, error)
	UpdateChangeRequest(ctx context.Context, in *UpdateChangeRequestRequest, opts ...grpc.CallOption) (*UpdateChangeRequestResponse, error)
	// coming from github webhooks/github-actions
	ReportPullRequestClosed(ctx context.Context, in *ReportPullRequestClosedRequest, opts ...grpc.CallOption) (*ReportPullRequestClosedResponse, error)
	ReportDefaultBranchUpdated(ctx context.Context, in *ReportDefaultBranchUpdatedRequest, opts ...grpc.CallOption) (*ReportDefaultBranchUpdatedResponse, error)
	ReportConflictResolved(ctx context.Context, in *ReportPullRequestClosedRequest, opts ...grpc.CallOption) (*ReportPullRequestClosedResponse, error)
	// coming from the job that runs in cloud run, no need to expose these via BFF
	UpdateRebaseJobStatus(ctx context.Context, in *UpdateJobStatusRequest, opts ...grpc.CallOption) (*UpdateJobStatusResponse, error)
	UpdateTMTJobStatus(ctx context.Context, in *UpdateJobStatusRequest, opts ...grpc.CallOption) (*UpdateJobStatusResponse, error)
	GetTMTJob(ctx context.Context, in *GetTMTJobRequest, opts ...grpc.CallOption) (*TMTJob, error)
	GetRebaseJob(ctx context.Context, in *GetRebaseJobRequest, opts ...grpc.CallOption) (*RebaseJob, error)
}

type changeRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChangeRequestServiceClient(cc grpc.ClientConnInterface) ChangeRequestServiceClient {
	return &changeRequestServiceClient{cc}
}

func (c *changeRequestServiceClient) CreateTMTProject(ctx context.Context, in *CreateTMTProjectRequest, opts ...grpc.CallOption) (*CreateTMTProjectResponse, error) {
	out := new(CreateTMTProjectResponse)
	err := c.cc.Invoke(ctx, ChangeRequestService_CreateTMTProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) GetChangeRequest(ctx context.Context, in *GetChangeRequestRequest, opts ...grpc.CallOption) (*ChangeRequest, error) {
	out := new(ChangeRequest)
	err := c.cc.Invoke(ctx, ChangeRequestService_GetChangeRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) GetAllChangeRequests(ctx context.Context, in *GetAllChangeRequestsRequest, opts ...grpc.CallOption) (*ChangeRequestList, error) {
	out := new(ChangeRequestList)
	err := c.cc.Invoke(ctx, ChangeRequestService_GetAllChangeRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) UpdateChangeRequest(ctx context.Context, in *UpdateChangeRequestRequest, opts ...grpc.CallOption) (*UpdateChangeRequestResponse, error) {
	out := new(UpdateChangeRequestResponse)
	err := c.cc.Invoke(ctx, ChangeRequestService_UpdateChangeRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) ReportPullRequestClosed(ctx context.Context, in *ReportPullRequestClosedRequest, opts ...grpc.CallOption) (*ReportPullRequestClosedResponse, error) {
	out := new(ReportPullRequestClosedResponse)
	err := c.cc.Invoke(ctx, ChangeRequestService_ReportPullRequestClosed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) ReportDefaultBranchUpdated(ctx context.Context, in *ReportDefaultBranchUpdatedRequest, opts ...grpc.CallOption) (*ReportDefaultBranchUpdatedResponse, error) {
	out := new(ReportDefaultBranchUpdatedResponse)
	err := c.cc.Invoke(ctx, ChangeRequestService_ReportDefaultBranchUpdated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) ReportConflictResolved(ctx context.Context, in *ReportPullRequestClosedRequest, opts ...grpc.CallOption) (*ReportPullRequestClosedResponse, error) {
	out := new(ReportPullRequestClosedResponse)
	err := c.cc.Invoke(ctx, ChangeRequestService_ReportConflictResolved_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) UpdateRebaseJobStatus(ctx context.Context, in *UpdateJobStatusRequest, opts ...grpc.CallOption) (*UpdateJobStatusResponse, error) {
	out := new(UpdateJobStatusResponse)
	err := c.cc.Invoke(ctx, ChangeRequestService_UpdateRebaseJobStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) UpdateTMTJobStatus(ctx context.Context, in *UpdateJobStatusRequest, opts ...grpc.CallOption) (*UpdateJobStatusResponse, error) {
	out := new(UpdateJobStatusResponse)
	err := c.cc.Invoke(ctx, ChangeRequestService_UpdateTMTJobStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) GetTMTJob(ctx context.Context, in *GetTMTJobRequest, opts ...grpc.CallOption) (*TMTJob, error) {
	out := new(TMTJob)
	err := c.cc.Invoke(ctx, ChangeRequestService_GetTMTJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changeRequestServiceClient) GetRebaseJob(ctx context.Context, in *GetRebaseJobRequest, opts ...grpc.CallOption) (*RebaseJob, error) {
	out := new(RebaseJob)
	err := c.cc.Invoke(ctx, ChangeRequestService_GetRebaseJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangeRequestServiceServer is the server API for ChangeRequestService service.
// All implementations must embed UnimplementedChangeRequestServiceServer
// for forward compatibility
type ChangeRequestServiceServer interface {
	// coming from clients, requesting things, via the BFFfs
	CreateTMTProject(context.Context, *CreateTMTProjectRequest) (*CreateTMTProjectResponse, error)
	// general rpcs
	GetChangeRequest(context.Context, *GetChangeRequestRequest) (*ChangeRequest, error)
	GetAllChangeRequests(context.Context, *GetAllChangeRequestsRequest) (*ChangeRequestList, error)
	UpdateChangeRequest(context.Context, *UpdateChangeRequestRequest) (*UpdateChangeRequestResponse, error)
	// coming from github webhooks/github-actions
	ReportPullRequestClosed(context.Context, *ReportPullRequestClosedRequest) (*ReportPullRequestClosedResponse, error)
	ReportDefaultBranchUpdated(context.Context, *ReportDefaultBranchUpdatedRequest) (*ReportDefaultBranchUpdatedResponse, error)
	ReportConflictResolved(context.Context, *ReportPullRequestClosedRequest) (*ReportPullRequestClosedResponse, error)
	// coming from the job that runs in cloud run, no need to expose these via BFF
	UpdateRebaseJobStatus(context.Context, *UpdateJobStatusRequest) (*UpdateJobStatusResponse, error)
	UpdateTMTJobStatus(context.Context, *UpdateJobStatusRequest) (*UpdateJobStatusResponse, error)
	GetTMTJob(context.Context, *GetTMTJobRequest) (*TMTJob, error)
	GetRebaseJob(context.Context, *GetRebaseJobRequest) (*RebaseJob, error)
	mustEmbedUnimplementedChangeRequestServiceServer()
}

// UnimplementedChangeRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChangeRequestServiceServer struct {
}

func (UnimplementedChangeRequestServiceServer) CreateTMTProject(context.Context, *CreateTMTProjectRequest) (*CreateTMTProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTMTProject not implemented")
}
func (UnimplementedChangeRequestServiceServer) GetChangeRequest(context.Context, *GetChangeRequestRequest) (*ChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangeRequest not implemented")
}
func (UnimplementedChangeRequestServiceServer) GetAllChangeRequests(context.Context, *GetAllChangeRequestsRequest) (*ChangeRequestList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChangeRequests not implemented")
}
func (UnimplementedChangeRequestServiceServer) UpdateChangeRequest(context.Context, *UpdateChangeRequestRequest) (*UpdateChangeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChangeRequest not implemented")
}
func (UnimplementedChangeRequestServiceServer) ReportPullRequestClosed(context.Context, *ReportPullRequestClosedRequest) (*ReportPullRequestClosedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportPullRequestClosed not implemented")
}
func (UnimplementedChangeRequestServiceServer) ReportDefaultBranchUpdated(context.Context, *ReportDefaultBranchUpdatedRequest) (*ReportDefaultBranchUpdatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDefaultBranchUpdated not implemented")
}
func (UnimplementedChangeRequestServiceServer) ReportConflictResolved(context.Context, *ReportPullRequestClosedRequest) (*ReportPullRequestClosedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportConflictResolved not implemented")
}
func (UnimplementedChangeRequestServiceServer) UpdateRebaseJobStatus(context.Context, *UpdateJobStatusRequest) (*UpdateJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRebaseJobStatus not implemented")
}
func (UnimplementedChangeRequestServiceServer) UpdateTMTJobStatus(context.Context, *UpdateJobStatusRequest) (*UpdateJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTMTJobStatus not implemented")
}
func (UnimplementedChangeRequestServiceServer) GetTMTJob(context.Context, *GetTMTJobRequest) (*TMTJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTMTJob not implemented")
}
func (UnimplementedChangeRequestServiceServer) GetRebaseJob(context.Context, *GetRebaseJobRequest) (*RebaseJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebaseJob not implemented")
}
func (UnimplementedChangeRequestServiceServer) mustEmbedUnimplementedChangeRequestServiceServer() {}

// UnsafeChangeRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangeRequestServiceServer will
// result in compilation errors.
type UnsafeChangeRequestServiceServer interface {
	mustEmbedUnimplementedChangeRequestServiceServer()
}

func RegisterChangeRequestServiceServer(s grpc.ServiceRegistrar, srv ChangeRequestServiceServer) {
	s.RegisterService(&ChangeRequestService_ServiceDesc, srv)
}

func _ChangeRequestService_CreateTMTProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTMTProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).CreateTMTProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_CreateTMTProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).CreateTMTProject(ctx, req.(*CreateTMTProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_GetChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).GetChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_GetChangeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).GetChangeRequest(ctx, req.(*GetChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_GetAllChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChangeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).GetAllChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_GetAllChangeRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).GetAllChangeRequests(ctx, req.(*GetAllChangeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_UpdateChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).UpdateChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_UpdateChangeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).UpdateChangeRequest(ctx, req.(*UpdateChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_ReportPullRequestClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportPullRequestClosedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).ReportPullRequestClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_ReportPullRequestClosed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).ReportPullRequestClosed(ctx, req.(*ReportPullRequestClosedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_ReportDefaultBranchUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDefaultBranchUpdatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).ReportDefaultBranchUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_ReportDefaultBranchUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).ReportDefaultBranchUpdated(ctx, req.(*ReportDefaultBranchUpdatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_ReportConflictResolved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportPullRequestClosedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).ReportConflictResolved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_ReportConflictResolved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).ReportConflictResolved(ctx, req.(*ReportPullRequestClosedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_UpdateRebaseJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).UpdateRebaseJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_UpdateRebaseJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).UpdateRebaseJobStatus(ctx, req.(*UpdateJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_UpdateTMTJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).UpdateTMTJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_UpdateTMTJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).UpdateTMTJobStatus(ctx, req.(*UpdateJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_GetTMTJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTMTJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).GetTMTJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_GetTMTJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).GetTMTJob(ctx, req.(*GetTMTJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangeRequestService_GetRebaseJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRebaseJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangeRequestServiceServer).GetRebaseJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangeRequestService_GetRebaseJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangeRequestServiceServer).GetRebaseJob(ctx, req.(*GetRebaseJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChangeRequestService_ServiceDesc is the grpc.ServiceDesc for ChangeRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangeRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crspb.ChangeRequestService",
	HandlerType: (*ChangeRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTMTProject",
			Handler:    _ChangeRequestService_CreateTMTProject_Handler,
		},
		{
			MethodName: "GetChangeRequest",
			Handler:    _ChangeRequestService_GetChangeRequest_Handler,
		},
		{
			MethodName: "GetAllChangeRequests",
			Handler:    _ChangeRequestService_GetAllChangeRequests_Handler,
		},
		{
			MethodName: "UpdateChangeRequest",
			Handler:    _ChangeRequestService_UpdateChangeRequest_Handler,
		},
		{
			MethodName: "ReportPullRequestClosed",
			Handler:    _ChangeRequestService_ReportPullRequestClosed_Handler,
		},
		{
			MethodName: "ReportDefaultBranchUpdated",
			Handler:    _ChangeRequestService_ReportDefaultBranchUpdated_Handler,
		},
		{
			MethodName: "ReportConflictResolved",
			Handler:    _ChangeRequestService_ReportConflictResolved_Handler,
		},
		{
			MethodName: "UpdateRebaseJobStatus",
			Handler:    _ChangeRequestService_UpdateRebaseJobStatus_Handler,
		},
		{
			MethodName: "UpdateTMTJobStatus",
			Handler:    _ChangeRequestService_UpdateTMTJobStatus_Handler,
		},
		{
			MethodName: "GetTMTJob",
			Handler:    _ChangeRequestService_GetTMTJob_Handler,
		},
		{
			MethodName: "GetRebaseJob",
			Handler:    _ChangeRequestService_GetRebaseJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ChangeRequestService.proto",
}
