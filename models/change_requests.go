// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChangeRequest is an object representing the database table.
type ChangeRequest struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GithubPRID  null.String `boil:"github_pr_id" json:"github_pr_id,omitempty" toml:"github_pr_id" yaml:"github_pr_id,omitempty"`
	GithubPRURL null.String `boil:"github_pr_url" json:"github_pr_url,omitempty" toml:"github_pr_url" yaml:"github_pr_url,omitempty"`
	CreatedBy   string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Type        string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Docs        null.String `boil:"docs" json:"docs,omitempty" toml:"docs" yaml:"docs,omitempty"`

	R *changeRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L changeRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChangeRequestColumns = struct {
	ID          string
	GithubPRID  string
	GithubPRURL string
	CreatedBy   string
	CreatedAt   string
	Type        string
	Docs        string
}{
	ID:          "id",
	GithubPRID:  "github_pr_id",
	GithubPRURL: "github_pr_url",
	CreatedBy:   "created_by",
	CreatedAt:   "created_at",
	Type:        "type",
	Docs:        "docs",
}

var ChangeRequestTableColumns = struct {
	ID          string
	GithubPRID  string
	GithubPRURL string
	CreatedBy   string
	CreatedAt   string
	Type        string
	Docs        string
}{
	ID:          "change_requests.id",
	GithubPRID:  "change_requests.github_pr_id",
	GithubPRURL: "change_requests.github_pr_url",
	CreatedBy:   "change_requests.created_by",
	CreatedAt:   "change_requests.created_at",
	Type:        "change_requests.type",
	Docs:        "change_requests.docs",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ChangeRequestWhere = struct {
	ID          whereHelperint
	GithubPRID  whereHelpernull_String
	GithubPRURL whereHelpernull_String
	CreatedBy   whereHelperstring
	CreatedAt   whereHelpertime_Time
	Type        whereHelperstring
	Docs        whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"change_requests\".\"id\""},
	GithubPRID:  whereHelpernull_String{field: "\"change_requests\".\"github_pr_id\""},
	GithubPRURL: whereHelpernull_String{field: "\"change_requests\".\"github_pr_url\""},
	CreatedBy:   whereHelperstring{field: "\"change_requests\".\"created_by\""},
	CreatedAt:   whereHelpertime_Time{field: "\"change_requests\".\"created_at\""},
	Type:        whereHelperstring{field: "\"change_requests\".\"type\""},
	Docs:        whereHelpernull_String{field: "\"change_requests\".\"docs\""},
}

// ChangeRequestRels is where relationship names are stored.
var ChangeRequestRels = struct {
	RebaseJobs string
	TMTJobs    string
}{
	RebaseJobs: "RebaseJobs",
	TMTJobs:    "TMTJobs",
}

// changeRequestR is where relationships are stored.
type changeRequestR struct {
	RebaseJobs RebaseJobSlice `boil:"RebaseJobs" json:"RebaseJobs" toml:"RebaseJobs" yaml:"RebaseJobs"`
	TMTJobs    TMTJobSlice    `boil:"TMTJobs" json:"TMTJobs" toml:"TMTJobs" yaml:"TMTJobs"`
}

// NewStruct creates a new relationship struct
func (*changeRequestR) NewStruct() *changeRequestR {
	return &changeRequestR{}
}

func (r *changeRequestR) GetRebaseJobs() RebaseJobSlice {
	if r == nil {
		return nil
	}
	return r.RebaseJobs
}

func (r *changeRequestR) GetTMTJobs() TMTJobSlice {
	if r == nil {
		return nil
	}
	return r.TMTJobs
}

// changeRequestL is where Load methods for each relationship are stored.
type changeRequestL struct{}

var (
	changeRequestAllColumns            = []string{"id", "github_pr_id", "github_pr_url", "created_by", "created_at", "type", "docs"}
	changeRequestColumnsWithoutDefault = []string{"created_by", "type"}
	changeRequestColumnsWithDefault    = []string{"id", "github_pr_id", "github_pr_url", "created_at", "docs"}
	changeRequestPrimaryKeyColumns     = []string{"id"}
	changeRequestGeneratedColumns      = []string{}
)

type (
	// ChangeRequestSlice is an alias for a slice of pointers to ChangeRequest.
	// This should almost always be used instead of []ChangeRequest.
	ChangeRequestSlice []*ChangeRequest
	// ChangeRequestHook is the signature for custom ChangeRequest hook methods
	ChangeRequestHook func(context.Context, boil.ContextExecutor, *ChangeRequest) error

	changeRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	changeRequestType                 = reflect.TypeOf(&ChangeRequest{})
	changeRequestMapping              = queries.MakeStructMapping(changeRequestType)
	changeRequestPrimaryKeyMapping, _ = queries.BindMapping(changeRequestType, changeRequestMapping, changeRequestPrimaryKeyColumns)
	changeRequestInsertCacheMut       sync.RWMutex
	changeRequestInsertCache          = make(map[string]insertCache)
	changeRequestUpdateCacheMut       sync.RWMutex
	changeRequestUpdateCache          = make(map[string]updateCache)
	changeRequestUpsertCacheMut       sync.RWMutex
	changeRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var changeRequestAfterSelectMu sync.Mutex
var changeRequestAfterSelectHooks []ChangeRequestHook

var changeRequestBeforeInsertMu sync.Mutex
var changeRequestBeforeInsertHooks []ChangeRequestHook
var changeRequestAfterInsertMu sync.Mutex
var changeRequestAfterInsertHooks []ChangeRequestHook

var changeRequestBeforeUpdateMu sync.Mutex
var changeRequestBeforeUpdateHooks []ChangeRequestHook
var changeRequestAfterUpdateMu sync.Mutex
var changeRequestAfterUpdateHooks []ChangeRequestHook

var changeRequestBeforeDeleteMu sync.Mutex
var changeRequestBeforeDeleteHooks []ChangeRequestHook
var changeRequestAfterDeleteMu sync.Mutex
var changeRequestAfterDeleteHooks []ChangeRequestHook

var changeRequestBeforeUpsertMu sync.Mutex
var changeRequestBeforeUpsertHooks []ChangeRequestHook
var changeRequestAfterUpsertMu sync.Mutex
var changeRequestAfterUpsertHooks []ChangeRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChangeRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range changeRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChangeRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range changeRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChangeRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range changeRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChangeRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range changeRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChangeRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range changeRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChangeRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range changeRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChangeRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range changeRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChangeRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range changeRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChangeRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range changeRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChangeRequestHook registers your hook function for all future operations.
func AddChangeRequestHook(hookPoint boil.HookPoint, changeRequestHook ChangeRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		changeRequestAfterSelectMu.Lock()
		changeRequestAfterSelectHooks = append(changeRequestAfterSelectHooks, changeRequestHook)
		changeRequestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		changeRequestBeforeInsertMu.Lock()
		changeRequestBeforeInsertHooks = append(changeRequestBeforeInsertHooks, changeRequestHook)
		changeRequestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		changeRequestAfterInsertMu.Lock()
		changeRequestAfterInsertHooks = append(changeRequestAfterInsertHooks, changeRequestHook)
		changeRequestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		changeRequestBeforeUpdateMu.Lock()
		changeRequestBeforeUpdateHooks = append(changeRequestBeforeUpdateHooks, changeRequestHook)
		changeRequestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		changeRequestAfterUpdateMu.Lock()
		changeRequestAfterUpdateHooks = append(changeRequestAfterUpdateHooks, changeRequestHook)
		changeRequestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		changeRequestBeforeDeleteMu.Lock()
		changeRequestBeforeDeleteHooks = append(changeRequestBeforeDeleteHooks, changeRequestHook)
		changeRequestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		changeRequestAfterDeleteMu.Lock()
		changeRequestAfterDeleteHooks = append(changeRequestAfterDeleteHooks, changeRequestHook)
		changeRequestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		changeRequestBeforeUpsertMu.Lock()
		changeRequestBeforeUpsertHooks = append(changeRequestBeforeUpsertHooks, changeRequestHook)
		changeRequestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		changeRequestAfterUpsertMu.Lock()
		changeRequestAfterUpsertHooks = append(changeRequestAfterUpsertHooks, changeRequestHook)
		changeRequestAfterUpsertMu.Unlock()
	}
}

// One returns a single changeRequest record from the query.
func (q changeRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChangeRequest, error) {
	o := &ChangeRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for change_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChangeRequest records from the query.
func (q changeRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChangeRequestSlice, error) {
	var o []*ChangeRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChangeRequest slice")
	}

	if len(changeRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChangeRequest records in the query.
func (q changeRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count change_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q changeRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if change_requests exists")
	}

	return count > 0, nil
}

// RebaseJobs retrieves all the rebase_job's RebaseJobs with an executor.
func (o *ChangeRequest) RebaseJobs(mods ...qm.QueryMod) rebaseJobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"rebase_jobs\".\"change_request_id\"=?", o.ID),
	)

	return RebaseJobs(queryMods...)
}

// TMTJobs retrieves all the tmt_job's TMTJobs with an executor.
func (o *ChangeRequest) TMTJobs(mods ...qm.QueryMod) tmtJobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tmt_jobs\".\"change_request_id\"=?", o.ID),
	)

	return TMTJobs(queryMods...)
}

// LoadRebaseJobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (changeRequestL) LoadRebaseJobs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChangeRequest interface{}, mods queries.Applicator) error {
	var slice []*ChangeRequest
	var object *ChangeRequest

	if singular {
		var ok bool
		object, ok = maybeChangeRequest.(*ChangeRequest)
		if !ok {
			object = new(ChangeRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChangeRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChangeRequest))
			}
		}
	} else {
		s, ok := maybeChangeRequest.(*[]*ChangeRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChangeRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChangeRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &changeRequestR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &changeRequestR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rebase_jobs`),
		qm.WhereIn(`rebase_jobs.change_request_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rebase_jobs")
	}

	var resultSlice []*RebaseJob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rebase_jobs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rebase_jobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rebase_jobs")
	}

	if len(rebaseJobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RebaseJobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rebaseJobR{}
			}
			foreign.R.ChangeRequest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChangeRequestID {
				local.R.RebaseJobs = append(local.R.RebaseJobs, foreign)
				if foreign.R == nil {
					foreign.R = &rebaseJobR{}
				}
				foreign.R.ChangeRequest = local
				break
			}
		}
	}

	return nil
}

// LoadTMTJobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (changeRequestL) LoadTMTJobs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChangeRequest interface{}, mods queries.Applicator) error {
	var slice []*ChangeRequest
	var object *ChangeRequest

	if singular {
		var ok bool
		object, ok = maybeChangeRequest.(*ChangeRequest)
		if !ok {
			object = new(ChangeRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChangeRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChangeRequest))
			}
		}
	} else {
		s, ok := maybeChangeRequest.(*[]*ChangeRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChangeRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChangeRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &changeRequestR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &changeRequestR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tmt_jobs`),
		qm.WhereIn(`tmt_jobs.change_request_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tmt_jobs")
	}

	var resultSlice []*TMTJob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tmt_jobs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tmt_jobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tmt_jobs")
	}

	if len(tmtJobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TMTJobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tmtJobR{}
			}
			foreign.R.ChangeRequest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChangeRequestID {
				local.R.TMTJobs = append(local.R.TMTJobs, foreign)
				if foreign.R == nil {
					foreign.R = &tmtJobR{}
				}
				foreign.R.ChangeRequest = local
				break
			}
		}
	}

	return nil
}

// AddRebaseJobs adds the given related objects to the existing relationships
// of the change_request, optionally inserting them as new records.
// Appends related to o.R.RebaseJobs.
// Sets related.R.ChangeRequest appropriately.
func (o *ChangeRequest) AddRebaseJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RebaseJob) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChangeRequestID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"rebase_jobs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"change_request_id"}),
				strmangle.WhereClause("\"", "\"", 2, rebaseJobPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChangeRequestID = o.ID
		}
	}

	if o.R == nil {
		o.R = &changeRequestR{
			RebaseJobs: related,
		}
	} else {
		o.R.RebaseJobs = append(o.R.RebaseJobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rebaseJobR{
				ChangeRequest: o,
			}
		} else {
			rel.R.ChangeRequest = o
		}
	}
	return nil
}

// AddTMTJobs adds the given related objects to the existing relationships
// of the change_request, optionally inserting them as new records.
// Appends related to o.R.TMTJobs.
// Sets related.R.ChangeRequest appropriately.
func (o *ChangeRequest) AddTMTJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TMTJob) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChangeRequestID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tmt_jobs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"change_request_id"}),
				strmangle.WhereClause("\"", "\"", 2, tmtJobPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChangeRequestID = o.ID
		}
	}

	if o.R == nil {
		o.R = &changeRequestR{
			TMTJobs: related,
		}
	} else {
		o.R.TMTJobs = append(o.R.TMTJobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tmtJobR{
				ChangeRequest: o,
			}
		} else {
			rel.R.ChangeRequest = o
		}
	}
	return nil
}

// ChangeRequests retrieves all the records using an executor.
func ChangeRequests(mods ...qm.QueryMod) changeRequestQuery {
	mods = append(mods, qm.From("\"change_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"change_requests\".*"})
	}

	return changeRequestQuery{q}
}

// FindChangeRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChangeRequest(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ChangeRequest, error) {
	changeRequestObj := &ChangeRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"change_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, changeRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from change_requests")
	}

	if err = changeRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return changeRequestObj, err
	}

	return changeRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChangeRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no change_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(changeRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	changeRequestInsertCacheMut.RLock()
	cache, cached := changeRequestInsertCache[key]
	changeRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			changeRequestAllColumns,
			changeRequestColumnsWithDefault,
			changeRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(changeRequestType, changeRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(changeRequestType, changeRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"change_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"change_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into change_requests")
	}

	if !cached {
		changeRequestInsertCacheMut.Lock()
		changeRequestInsertCache[key] = cache
		changeRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChangeRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChangeRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	changeRequestUpdateCacheMut.RLock()
	cache, cached := changeRequestUpdateCache[key]
	changeRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			changeRequestAllColumns,
			changeRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update change_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"change_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, changeRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(changeRequestType, changeRequestMapping, append(wl, changeRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update change_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for change_requests")
	}

	if !cached {
		changeRequestUpdateCacheMut.Lock()
		changeRequestUpdateCache[key] = cache
		changeRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q changeRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for change_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for change_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChangeRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), changeRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"change_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, changeRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in changeRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all changeRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChangeRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no change_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(changeRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	changeRequestUpsertCacheMut.RLock()
	cache, cached := changeRequestUpsertCache[key]
	changeRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			changeRequestAllColumns,
			changeRequestColumnsWithDefault,
			changeRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			changeRequestAllColumns,
			changeRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert change_requests, could not build update column list")
		}

		ret := strmangle.SetComplement(changeRequestAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(changeRequestPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert change_requests, could not build conflict column list")
			}

			conflict = make([]string, len(changeRequestPrimaryKeyColumns))
			copy(conflict, changeRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"change_requests\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(changeRequestType, changeRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(changeRequestType, changeRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert change_requests")
	}

	if !cached {
		changeRequestUpsertCacheMut.Lock()
		changeRequestUpsertCache[key] = cache
		changeRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChangeRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChangeRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChangeRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), changeRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"change_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from change_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for change_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q changeRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no changeRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from change_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for change_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChangeRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(changeRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), changeRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"change_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, changeRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from changeRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for change_requests")
	}

	if len(changeRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChangeRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChangeRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChangeRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChangeRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), changeRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"change_requests\".* FROM \"change_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, changeRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChangeRequestSlice")
	}

	*o = slice

	return nil
}

// ChangeRequestExists checks if the ChangeRequest row exists.
func ChangeRequestExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"change_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if change_requests exists")
	}

	return exists, nil
}

// Exists checks if the ChangeRequest row exists.
func (o *ChangeRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChangeRequestExists(ctx, exec, o.ID)
}
