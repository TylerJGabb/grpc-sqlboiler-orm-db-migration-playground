// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TMTJob is an object representing the database table.
type TMTJob struct {
	ID                      int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChangeRequestID         int         `boil:"change_request_id" json:"change_request_id" toml:"change_request_id" yaml:"change_request_id"`
	ProjectName             string      `boil:"project_name" json:"project_name" toml:"project_name" yaml:"project_name"`
	OrchestrationRepository string      `boil:"orchestration_repository" json:"orchestration_repository" toml:"orchestration_repository" yaml:"orchestration_repository"`
	Application             string      `boil:"application" json:"application" toml:"application" yaml:"application"`
	DV01Domain              string      `boil:"dv01_domain" json:"dv01_domain" toml:"dv01_domain" yaml:"dv01_domain"`
	UserEmail               string      `boil:"user_email" json:"user_email" toml:"user_email" yaml:"user_email"`
	CreatedAt               null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	CompletedAt             null.Time   `boil:"completed_at" json:"completed_at,omitempty" toml:"completed_at" yaml:"completed_at,omitempty"`
	Status                  JobStatus   `boil:"status" json:"status" toml:"status" yaml:"status"`
	StatusMessage           null.String `boil:"status_message" json:"status_message,omitempty" toml:"status_message" yaml:"status_message,omitempty"`

	R *tmtJobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tmtJobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TMTJobColumns = struct {
	ID                      string
	ChangeRequestID         string
	ProjectName             string
	OrchestrationRepository string
	Application             string
	DV01Domain              string
	UserEmail               string
	CreatedAt               string
	CompletedAt             string
	Status                  string
	StatusMessage           string
}{
	ID:                      "id",
	ChangeRequestID:         "change_request_id",
	ProjectName:             "project_name",
	OrchestrationRepository: "orchestration_repository",
	Application:             "application",
	DV01Domain:              "dv01_domain",
	UserEmail:               "user_email",
	CreatedAt:               "created_at",
	CompletedAt:             "completed_at",
	Status:                  "status",
	StatusMessage:           "status_message",
}

var TMTJobTableColumns = struct {
	ID                      string
	ChangeRequestID         string
	ProjectName             string
	OrchestrationRepository string
	Application             string
	DV01Domain              string
	UserEmail               string
	CreatedAt               string
	CompletedAt             string
	Status                  string
	StatusMessage           string
}{
	ID:                      "tmt_jobs.id",
	ChangeRequestID:         "tmt_jobs.change_request_id",
	ProjectName:             "tmt_jobs.project_name",
	OrchestrationRepository: "tmt_jobs.orchestration_repository",
	Application:             "tmt_jobs.application",
	DV01Domain:              "tmt_jobs.dv01_domain",
	UserEmail:               "tmt_jobs.user_email",
	CreatedAt:               "tmt_jobs.created_at",
	CompletedAt:             "tmt_jobs.completed_at",
	Status:                  "tmt_jobs.status",
	StatusMessage:           "tmt_jobs.status_message",
}

// Generated where

var TMTJobWhere = struct {
	ID                      whereHelperint
	ChangeRequestID         whereHelperint
	ProjectName             whereHelperstring
	OrchestrationRepository whereHelperstring
	Application             whereHelperstring
	DV01Domain              whereHelperstring
	UserEmail               whereHelperstring
	CreatedAt               whereHelpernull_Time
	CompletedAt             whereHelpernull_Time
	Status                  whereHelperJobStatus
	StatusMessage           whereHelpernull_String
}{
	ID:                      whereHelperint{field: "\"tmt_jobs\".\"id\""},
	ChangeRequestID:         whereHelperint{field: "\"tmt_jobs\".\"change_request_id\""},
	ProjectName:             whereHelperstring{field: "\"tmt_jobs\".\"project_name\""},
	OrchestrationRepository: whereHelperstring{field: "\"tmt_jobs\".\"orchestration_repository\""},
	Application:             whereHelperstring{field: "\"tmt_jobs\".\"application\""},
	DV01Domain:              whereHelperstring{field: "\"tmt_jobs\".\"dv01_domain\""},
	UserEmail:               whereHelperstring{field: "\"tmt_jobs\".\"user_email\""},
	CreatedAt:               whereHelpernull_Time{field: "\"tmt_jobs\".\"created_at\""},
	CompletedAt:             whereHelpernull_Time{field: "\"tmt_jobs\".\"completed_at\""},
	Status:                  whereHelperJobStatus{field: "\"tmt_jobs\".\"status\""},
	StatusMessage:           whereHelpernull_String{field: "\"tmt_jobs\".\"status_message\""},
}

// TMTJobRels is where relationship names are stored.
var TMTJobRels = struct {
	ChangeRequest string
}{
	ChangeRequest: "ChangeRequest",
}

// tmtJobR is where relationships are stored.
type tmtJobR struct {
	ChangeRequest *ChangeRequest `boil:"ChangeRequest" json:"ChangeRequest" toml:"ChangeRequest" yaml:"ChangeRequest"`
}

// NewStruct creates a new relationship struct
func (*tmtJobR) NewStruct() *tmtJobR {
	return &tmtJobR{}
}

func (r *tmtJobR) GetChangeRequest() *ChangeRequest {
	if r == nil {
		return nil
	}
	return r.ChangeRequest
}

// tmtJobL is where Load methods for each relationship are stored.
type tmtJobL struct{}

var (
	tmtJobAllColumns            = []string{"id", "change_request_id", "project_name", "orchestration_repository", "application", "dv01_domain", "user_email", "created_at", "completed_at", "status", "status_message"}
	tmtJobColumnsWithoutDefault = []string{"change_request_id", "project_name", "orchestration_repository", "application", "dv01_domain", "user_email"}
	tmtJobColumnsWithDefault    = []string{"id", "created_at", "completed_at", "status", "status_message"}
	tmtJobPrimaryKeyColumns     = []string{"id"}
	tmtJobGeneratedColumns      = []string{}
)

type (
	// TMTJobSlice is an alias for a slice of pointers to TMTJob.
	// This should almost always be used instead of []TMTJob.
	TMTJobSlice []*TMTJob
	// TMTJobHook is the signature for custom TMTJob hook methods
	TMTJobHook func(context.Context, boil.ContextExecutor, *TMTJob) error

	tmtJobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tmtJobType                 = reflect.TypeOf(&TMTJob{})
	tmtJobMapping              = queries.MakeStructMapping(tmtJobType)
	tmtJobPrimaryKeyMapping, _ = queries.BindMapping(tmtJobType, tmtJobMapping, tmtJobPrimaryKeyColumns)
	tmtJobInsertCacheMut       sync.RWMutex
	tmtJobInsertCache          = make(map[string]insertCache)
	tmtJobUpdateCacheMut       sync.RWMutex
	tmtJobUpdateCache          = make(map[string]updateCache)
	tmtJobUpsertCacheMut       sync.RWMutex
	tmtJobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tmtJobAfterSelectMu sync.Mutex
var tmtJobAfterSelectHooks []TMTJobHook

var tmtJobBeforeInsertMu sync.Mutex
var tmtJobBeforeInsertHooks []TMTJobHook
var tmtJobAfterInsertMu sync.Mutex
var tmtJobAfterInsertHooks []TMTJobHook

var tmtJobBeforeUpdateMu sync.Mutex
var tmtJobBeforeUpdateHooks []TMTJobHook
var tmtJobAfterUpdateMu sync.Mutex
var tmtJobAfterUpdateHooks []TMTJobHook

var tmtJobBeforeDeleteMu sync.Mutex
var tmtJobBeforeDeleteHooks []TMTJobHook
var tmtJobAfterDeleteMu sync.Mutex
var tmtJobAfterDeleteHooks []TMTJobHook

var tmtJobBeforeUpsertMu sync.Mutex
var tmtJobBeforeUpsertHooks []TMTJobHook
var tmtJobAfterUpsertMu sync.Mutex
var tmtJobAfterUpsertHooks []TMTJobHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TMTJob) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tmtJobAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TMTJob) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tmtJobBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TMTJob) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tmtJobAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TMTJob) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tmtJobBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TMTJob) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tmtJobAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TMTJob) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tmtJobBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TMTJob) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tmtJobAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TMTJob) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tmtJobBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TMTJob) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tmtJobAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTMTJobHook registers your hook function for all future operations.
func AddTMTJobHook(hookPoint boil.HookPoint, tmtJobHook TMTJobHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tmtJobAfterSelectMu.Lock()
		tmtJobAfterSelectHooks = append(tmtJobAfterSelectHooks, tmtJobHook)
		tmtJobAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tmtJobBeforeInsertMu.Lock()
		tmtJobBeforeInsertHooks = append(tmtJobBeforeInsertHooks, tmtJobHook)
		tmtJobBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tmtJobAfterInsertMu.Lock()
		tmtJobAfterInsertHooks = append(tmtJobAfterInsertHooks, tmtJobHook)
		tmtJobAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tmtJobBeforeUpdateMu.Lock()
		tmtJobBeforeUpdateHooks = append(tmtJobBeforeUpdateHooks, tmtJobHook)
		tmtJobBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tmtJobAfterUpdateMu.Lock()
		tmtJobAfterUpdateHooks = append(tmtJobAfterUpdateHooks, tmtJobHook)
		tmtJobAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tmtJobBeforeDeleteMu.Lock()
		tmtJobBeforeDeleteHooks = append(tmtJobBeforeDeleteHooks, tmtJobHook)
		tmtJobBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tmtJobAfterDeleteMu.Lock()
		tmtJobAfterDeleteHooks = append(tmtJobAfterDeleteHooks, tmtJobHook)
		tmtJobAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tmtJobBeforeUpsertMu.Lock()
		tmtJobBeforeUpsertHooks = append(tmtJobBeforeUpsertHooks, tmtJobHook)
		tmtJobBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tmtJobAfterUpsertMu.Lock()
		tmtJobAfterUpsertHooks = append(tmtJobAfterUpsertHooks, tmtJobHook)
		tmtJobAfterUpsertMu.Unlock()
	}
}

// One returns a single tmtJob record from the query.
func (q tmtJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TMTJob, error) {
	o := &TMTJob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tmt_jobs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TMTJob records from the query.
func (q tmtJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (TMTJobSlice, error) {
	var o []*TMTJob

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TMTJob slice")
	}

	if len(tmtJobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TMTJob records in the query.
func (q tmtJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tmt_jobs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tmtJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tmt_jobs exists")
	}

	return count > 0, nil
}

// ChangeRequest pointed to by the foreign key.
func (o *TMTJob) ChangeRequest(mods ...qm.QueryMod) changeRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChangeRequestID),
	}

	queryMods = append(queryMods, mods...)

	return ChangeRequests(queryMods...)
}

// LoadChangeRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tmtJobL) LoadChangeRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTMTJob interface{}, mods queries.Applicator) error {
	var slice []*TMTJob
	var object *TMTJob

	if singular {
		var ok bool
		object, ok = maybeTMTJob.(*TMTJob)
		if !ok {
			object = new(TMTJob)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTMTJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTMTJob))
			}
		}
	} else {
		s, ok := maybeTMTJob.(*[]*TMTJob)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTMTJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTMTJob))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tmtJobR{}
		}
		args[object.ChangeRequestID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tmtJobR{}
			}

			args[obj.ChangeRequestID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`change_requests`),
		qm.WhereIn(`change_requests.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChangeRequest")
	}

	var resultSlice []*ChangeRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChangeRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for change_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for change_requests")
	}

	if len(changeRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChangeRequest = foreign
		if foreign.R == nil {
			foreign.R = &changeRequestR{}
		}
		foreign.R.TMTJobs = append(foreign.R.TMTJobs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChangeRequestID == foreign.ID {
				local.R.ChangeRequest = foreign
				if foreign.R == nil {
					foreign.R = &changeRequestR{}
				}
				foreign.R.TMTJobs = append(foreign.R.TMTJobs, local)
				break
			}
		}
	}

	return nil
}

// SetChangeRequest of the tmtJob to the related item.
// Sets o.R.ChangeRequest to related.
// Adds o to related.R.TMTJobs.
func (o *TMTJob) SetChangeRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChangeRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tmt_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"change_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, tmtJobPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChangeRequestID = related.ID
	if o.R == nil {
		o.R = &tmtJobR{
			ChangeRequest: related,
		}
	} else {
		o.R.ChangeRequest = related
	}

	if related.R == nil {
		related.R = &changeRequestR{
			TMTJobs: TMTJobSlice{o},
		}
	} else {
		related.R.TMTJobs = append(related.R.TMTJobs, o)
	}

	return nil
}

// TMTJobs retrieves all the records using an executor.
func TMTJobs(mods ...qm.QueryMod) tmtJobQuery {
	mods = append(mods, qm.From("\"tmt_jobs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tmt_jobs\".*"})
	}

	return tmtJobQuery{q}
}

// FindTMTJob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTMTJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TMTJob, error) {
	tmtJobObj := &TMTJob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tmt_jobs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tmtJobObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tmt_jobs")
	}

	if err = tmtJobObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tmtJobObj, err
	}

	return tmtJobObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TMTJob) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tmt_jobs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tmtJobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tmtJobInsertCacheMut.RLock()
	cache, cached := tmtJobInsertCache[key]
	tmtJobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tmtJobAllColumns,
			tmtJobColumnsWithDefault,
			tmtJobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tmtJobType, tmtJobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tmtJobType, tmtJobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tmt_jobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tmt_jobs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tmt_jobs")
	}

	if !cached {
		tmtJobInsertCacheMut.Lock()
		tmtJobInsertCache[key] = cache
		tmtJobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TMTJob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TMTJob) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tmtJobUpdateCacheMut.RLock()
	cache, cached := tmtJobUpdateCache[key]
	tmtJobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tmtJobAllColumns,
			tmtJobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tmt_jobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tmt_jobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tmtJobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tmtJobType, tmtJobMapping, append(wl, tmtJobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tmt_jobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tmt_jobs")
	}

	if !cached {
		tmtJobUpdateCacheMut.Lock()
		tmtJobUpdateCache[key] = cache
		tmtJobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tmtJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tmt_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tmt_jobs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TMTJobSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tmtJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tmt_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tmtJobPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tmtJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tmtJob")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TMTJob) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no tmt_jobs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tmtJobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tmtJobUpsertCacheMut.RLock()
	cache, cached := tmtJobUpsertCache[key]
	tmtJobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tmtJobAllColumns,
			tmtJobColumnsWithDefault,
			tmtJobColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tmtJobAllColumns,
			tmtJobPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tmt_jobs, could not build update column list")
		}

		ret := strmangle.SetComplement(tmtJobAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tmtJobPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert tmt_jobs, could not build conflict column list")
			}

			conflict = make([]string, len(tmtJobPrimaryKeyColumns))
			copy(conflict, tmtJobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tmt_jobs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tmtJobType, tmtJobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tmtJobType, tmtJobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tmt_jobs")
	}

	if !cached {
		tmtJobUpsertCacheMut.Lock()
		tmtJobUpsertCache[key] = cache
		tmtJobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TMTJob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TMTJob) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TMTJob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tmtJobPrimaryKeyMapping)
	sql := "DELETE FROM \"tmt_jobs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tmt_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tmt_jobs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tmtJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tmtJobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tmt_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tmt_jobs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TMTJobSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tmtJobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tmtJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tmt_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tmtJobPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tmtJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tmt_jobs")
	}

	if len(tmtJobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TMTJob) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTMTJob(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TMTJobSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TMTJobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tmtJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tmt_jobs\".* FROM \"tmt_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tmtJobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TMTJobSlice")
	}

	*o = slice

	return nil
}

// TMTJobExists checks if the TMTJob row exists.
func TMTJobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tmt_jobs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tmt_jobs exists")
	}

	return exists, nil
}

// Exists checks if the TMTJob row exists.
func (o *TMTJob) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TMTJobExists(ctx, exec, o.ID)
}
