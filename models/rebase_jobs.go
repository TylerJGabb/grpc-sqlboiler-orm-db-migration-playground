// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RebaseJob is an object representing the database table.
type RebaseJob struct {
	ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChangeRequestID int         `boil:"change_request_id" json:"change_request_id" toml:"change_request_id" yaml:"change_request_id"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	CompletedAt     null.Time   `boil:"completed_at" json:"completed_at,omitempty" toml:"completed_at" yaml:"completed_at,omitempty"`
	Status          JobStatus   `boil:"status" json:"status" toml:"status" yaml:"status"`
	StatusMessage   null.String `boil:"status_message" json:"status_message,omitempty" toml:"status_message" yaml:"status_message,omitempty"`

	R *rebaseJobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rebaseJobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RebaseJobColumns = struct {
	ID              string
	ChangeRequestID string
	CreatedAt       string
	CompletedAt     string
	Status          string
	StatusMessage   string
}{
	ID:              "id",
	ChangeRequestID: "change_request_id",
	CreatedAt:       "created_at",
	CompletedAt:     "completed_at",
	Status:          "status",
	StatusMessage:   "status_message",
}

var RebaseJobTableColumns = struct {
	ID              string
	ChangeRequestID string
	CreatedAt       string
	CompletedAt     string
	Status          string
	StatusMessage   string
}{
	ID:              "rebase_jobs.id",
	ChangeRequestID: "rebase_jobs.change_request_id",
	CreatedAt:       "rebase_jobs.created_at",
	CompletedAt:     "rebase_jobs.completed_at",
	Status:          "rebase_jobs.status",
	StatusMessage:   "rebase_jobs.status_message",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperJobStatus struct{ field string }

func (w whereHelperJobStatus) EQ(x JobStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperJobStatus) NEQ(x JobStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperJobStatus) LT(x JobStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperJobStatus) LTE(x JobStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperJobStatus) GT(x JobStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperJobStatus) GTE(x JobStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperJobStatus) IN(slice []JobStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperJobStatus) NIN(slice []JobStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var RebaseJobWhere = struct {
	ID              whereHelperint
	ChangeRequestID whereHelperint
	CreatedAt       whereHelpernull_Time
	CompletedAt     whereHelpernull_Time
	Status          whereHelperJobStatus
	StatusMessage   whereHelpernull_String
}{
	ID:              whereHelperint{field: "\"rebase_jobs\".\"id\""},
	ChangeRequestID: whereHelperint{field: "\"rebase_jobs\".\"change_request_id\""},
	CreatedAt:       whereHelpernull_Time{field: "\"rebase_jobs\".\"created_at\""},
	CompletedAt:     whereHelpernull_Time{field: "\"rebase_jobs\".\"completed_at\""},
	Status:          whereHelperJobStatus{field: "\"rebase_jobs\".\"status\""},
	StatusMessage:   whereHelpernull_String{field: "\"rebase_jobs\".\"status_message\""},
}

// RebaseJobRels is where relationship names are stored.
var RebaseJobRels = struct {
	ChangeRequest string
}{
	ChangeRequest: "ChangeRequest",
}

// rebaseJobR is where relationships are stored.
type rebaseJobR struct {
	ChangeRequest *ChangeRequest `boil:"ChangeRequest" json:"ChangeRequest" toml:"ChangeRequest" yaml:"ChangeRequest"`
}

// NewStruct creates a new relationship struct
func (*rebaseJobR) NewStruct() *rebaseJobR {
	return &rebaseJobR{}
}

func (r *rebaseJobR) GetChangeRequest() *ChangeRequest {
	if r == nil {
		return nil
	}
	return r.ChangeRequest
}

// rebaseJobL is where Load methods for each relationship are stored.
type rebaseJobL struct{}

var (
	rebaseJobAllColumns            = []string{"id", "change_request_id", "created_at", "completed_at", "status", "status_message"}
	rebaseJobColumnsWithoutDefault = []string{"change_request_id"}
	rebaseJobColumnsWithDefault    = []string{"id", "created_at", "completed_at", "status", "status_message"}
	rebaseJobPrimaryKeyColumns     = []string{"id"}
	rebaseJobGeneratedColumns      = []string{}
)

type (
	// RebaseJobSlice is an alias for a slice of pointers to RebaseJob.
	// This should almost always be used instead of []RebaseJob.
	RebaseJobSlice []*RebaseJob
	// RebaseJobHook is the signature for custom RebaseJob hook methods
	RebaseJobHook func(context.Context, boil.ContextExecutor, *RebaseJob) error

	rebaseJobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rebaseJobType                 = reflect.TypeOf(&RebaseJob{})
	rebaseJobMapping              = queries.MakeStructMapping(rebaseJobType)
	rebaseJobPrimaryKeyMapping, _ = queries.BindMapping(rebaseJobType, rebaseJobMapping, rebaseJobPrimaryKeyColumns)
	rebaseJobInsertCacheMut       sync.RWMutex
	rebaseJobInsertCache          = make(map[string]insertCache)
	rebaseJobUpdateCacheMut       sync.RWMutex
	rebaseJobUpdateCache          = make(map[string]updateCache)
	rebaseJobUpsertCacheMut       sync.RWMutex
	rebaseJobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rebaseJobAfterSelectMu sync.Mutex
var rebaseJobAfterSelectHooks []RebaseJobHook

var rebaseJobBeforeInsertMu sync.Mutex
var rebaseJobBeforeInsertHooks []RebaseJobHook
var rebaseJobAfterInsertMu sync.Mutex
var rebaseJobAfterInsertHooks []RebaseJobHook

var rebaseJobBeforeUpdateMu sync.Mutex
var rebaseJobBeforeUpdateHooks []RebaseJobHook
var rebaseJobAfterUpdateMu sync.Mutex
var rebaseJobAfterUpdateHooks []RebaseJobHook

var rebaseJobBeforeDeleteMu sync.Mutex
var rebaseJobBeforeDeleteHooks []RebaseJobHook
var rebaseJobAfterDeleteMu sync.Mutex
var rebaseJobAfterDeleteHooks []RebaseJobHook

var rebaseJobBeforeUpsertMu sync.Mutex
var rebaseJobBeforeUpsertHooks []RebaseJobHook
var rebaseJobAfterUpsertMu sync.Mutex
var rebaseJobAfterUpsertHooks []RebaseJobHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RebaseJob) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rebaseJobAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RebaseJob) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rebaseJobBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RebaseJob) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rebaseJobAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RebaseJob) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rebaseJobBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RebaseJob) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rebaseJobAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RebaseJob) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rebaseJobBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RebaseJob) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rebaseJobAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RebaseJob) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rebaseJobBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RebaseJob) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rebaseJobAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRebaseJobHook registers your hook function for all future operations.
func AddRebaseJobHook(hookPoint boil.HookPoint, rebaseJobHook RebaseJobHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		rebaseJobAfterSelectMu.Lock()
		rebaseJobAfterSelectHooks = append(rebaseJobAfterSelectHooks, rebaseJobHook)
		rebaseJobAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		rebaseJobBeforeInsertMu.Lock()
		rebaseJobBeforeInsertHooks = append(rebaseJobBeforeInsertHooks, rebaseJobHook)
		rebaseJobBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		rebaseJobAfterInsertMu.Lock()
		rebaseJobAfterInsertHooks = append(rebaseJobAfterInsertHooks, rebaseJobHook)
		rebaseJobAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		rebaseJobBeforeUpdateMu.Lock()
		rebaseJobBeforeUpdateHooks = append(rebaseJobBeforeUpdateHooks, rebaseJobHook)
		rebaseJobBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		rebaseJobAfterUpdateMu.Lock()
		rebaseJobAfterUpdateHooks = append(rebaseJobAfterUpdateHooks, rebaseJobHook)
		rebaseJobAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		rebaseJobBeforeDeleteMu.Lock()
		rebaseJobBeforeDeleteHooks = append(rebaseJobBeforeDeleteHooks, rebaseJobHook)
		rebaseJobBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		rebaseJobAfterDeleteMu.Lock()
		rebaseJobAfterDeleteHooks = append(rebaseJobAfterDeleteHooks, rebaseJobHook)
		rebaseJobAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		rebaseJobBeforeUpsertMu.Lock()
		rebaseJobBeforeUpsertHooks = append(rebaseJobBeforeUpsertHooks, rebaseJobHook)
		rebaseJobBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		rebaseJobAfterUpsertMu.Lock()
		rebaseJobAfterUpsertHooks = append(rebaseJobAfterUpsertHooks, rebaseJobHook)
		rebaseJobAfterUpsertMu.Unlock()
	}
}

// One returns a single rebaseJob record from the query.
func (q rebaseJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RebaseJob, error) {
	o := &RebaseJob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rebase_jobs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RebaseJob records from the query.
func (q rebaseJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (RebaseJobSlice, error) {
	var o []*RebaseJob

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RebaseJob slice")
	}

	if len(rebaseJobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RebaseJob records in the query.
func (q rebaseJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rebase_jobs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rebaseJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rebase_jobs exists")
	}

	return count > 0, nil
}

// ChangeRequest pointed to by the foreign key.
func (o *RebaseJob) ChangeRequest(mods ...qm.QueryMod) changeRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChangeRequestID),
	}

	queryMods = append(queryMods, mods...)

	return ChangeRequests(queryMods...)
}

// LoadChangeRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rebaseJobL) LoadChangeRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRebaseJob interface{}, mods queries.Applicator) error {
	var slice []*RebaseJob
	var object *RebaseJob

	if singular {
		var ok bool
		object, ok = maybeRebaseJob.(*RebaseJob)
		if !ok {
			object = new(RebaseJob)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRebaseJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRebaseJob))
			}
		}
	} else {
		s, ok := maybeRebaseJob.(*[]*RebaseJob)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRebaseJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRebaseJob))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rebaseJobR{}
		}
		args[object.ChangeRequestID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rebaseJobR{}
			}

			args[obj.ChangeRequestID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`change_requests`),
		qm.WhereIn(`change_requests.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChangeRequest")
	}

	var resultSlice []*ChangeRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChangeRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for change_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for change_requests")
	}

	if len(changeRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChangeRequest = foreign
		if foreign.R == nil {
			foreign.R = &changeRequestR{}
		}
		foreign.R.RebaseJobs = append(foreign.R.RebaseJobs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChangeRequestID == foreign.ID {
				local.R.ChangeRequest = foreign
				if foreign.R == nil {
					foreign.R = &changeRequestR{}
				}
				foreign.R.RebaseJobs = append(foreign.R.RebaseJobs, local)
				break
			}
		}
	}

	return nil
}

// SetChangeRequest of the rebaseJob to the related item.
// Sets o.R.ChangeRequest to related.
// Adds o to related.R.RebaseJobs.
func (o *RebaseJob) SetChangeRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ChangeRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rebase_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"change_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, rebaseJobPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChangeRequestID = related.ID
	if o.R == nil {
		o.R = &rebaseJobR{
			ChangeRequest: related,
		}
	} else {
		o.R.ChangeRequest = related
	}

	if related.R == nil {
		related.R = &changeRequestR{
			RebaseJobs: RebaseJobSlice{o},
		}
	} else {
		related.R.RebaseJobs = append(related.R.RebaseJobs, o)
	}

	return nil
}

// RebaseJobs retrieves all the records using an executor.
func RebaseJobs(mods ...qm.QueryMod) rebaseJobQuery {
	mods = append(mods, qm.From("\"rebase_jobs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rebase_jobs\".*"})
	}

	return rebaseJobQuery{q}
}

// FindRebaseJob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRebaseJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RebaseJob, error) {
	rebaseJobObj := &RebaseJob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rebase_jobs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rebaseJobObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rebase_jobs")
	}

	if err = rebaseJobObj.doAfterSelectHooks(ctx, exec); err != nil {
		return rebaseJobObj, err
	}

	return rebaseJobObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RebaseJob) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rebase_jobs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rebaseJobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rebaseJobInsertCacheMut.RLock()
	cache, cached := rebaseJobInsertCache[key]
	rebaseJobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rebaseJobAllColumns,
			rebaseJobColumnsWithDefault,
			rebaseJobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rebaseJobType, rebaseJobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rebaseJobType, rebaseJobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rebase_jobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rebase_jobs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rebase_jobs")
	}

	if !cached {
		rebaseJobInsertCacheMut.Lock()
		rebaseJobInsertCache[key] = cache
		rebaseJobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RebaseJob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RebaseJob) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rebaseJobUpdateCacheMut.RLock()
	cache, cached := rebaseJobUpdateCache[key]
	rebaseJobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rebaseJobAllColumns,
			rebaseJobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rebase_jobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rebase_jobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rebaseJobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rebaseJobType, rebaseJobMapping, append(wl, rebaseJobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rebase_jobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rebase_jobs")
	}

	if !cached {
		rebaseJobUpdateCacheMut.Lock()
		rebaseJobUpdateCache[key] = cache
		rebaseJobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rebaseJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rebase_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rebase_jobs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RebaseJobSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rebaseJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rebase_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rebaseJobPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rebaseJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rebaseJob")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RebaseJob) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no rebase_jobs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rebaseJobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rebaseJobUpsertCacheMut.RLock()
	cache, cached := rebaseJobUpsertCache[key]
	rebaseJobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			rebaseJobAllColumns,
			rebaseJobColumnsWithDefault,
			rebaseJobColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rebaseJobAllColumns,
			rebaseJobPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert rebase_jobs, could not build update column list")
		}

		ret := strmangle.SetComplement(rebaseJobAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(rebaseJobPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert rebase_jobs, could not build conflict column list")
			}

			conflict = make([]string, len(rebaseJobPrimaryKeyColumns))
			copy(conflict, rebaseJobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rebase_jobs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(rebaseJobType, rebaseJobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rebaseJobType, rebaseJobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rebase_jobs")
	}

	if !cached {
		rebaseJobUpsertCacheMut.Lock()
		rebaseJobUpsertCache[key] = cache
		rebaseJobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RebaseJob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RebaseJob) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RebaseJob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rebaseJobPrimaryKeyMapping)
	sql := "DELETE FROM \"rebase_jobs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rebase_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rebase_jobs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rebaseJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rebaseJobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rebase_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rebase_jobs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RebaseJobSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rebaseJobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rebaseJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rebase_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rebaseJobPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rebaseJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rebase_jobs")
	}

	if len(rebaseJobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RebaseJob) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRebaseJob(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RebaseJobSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RebaseJobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rebaseJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rebase_jobs\".* FROM \"rebase_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rebaseJobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RebaseJobSlice")
	}

	*o = slice

	return nil
}

// RebaseJobExists checks if the RebaseJob row exists.
func RebaseJobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rebase_jobs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rebase_jobs exists")
	}

	return exists, nil
}

// Exists checks if the RebaseJob row exists.
func (o *RebaseJob) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RebaseJobExists(ctx, exec, o.ID)
}
