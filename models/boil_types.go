// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type ChangeRequestType string

// Enum values for ChangeRequestType
const (
	ChangeRequestTypeUnknown    ChangeRequestType = "unknown"
	ChangeRequestTypeTMTProject ChangeRequestType = "tmt-project"
)

func AllChangeRequestType() []ChangeRequestType {
	return []ChangeRequestType{
		ChangeRequestTypeUnknown,
		ChangeRequestTypeTMTProject,
	}
}

func (e ChangeRequestType) IsValid() error {
	switch e {
	case ChangeRequestTypeUnknown, ChangeRequestTypeTMTProject:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ChangeRequestType) String() string {
	return string(e)
}

func (e ChangeRequestType) Ordinal() int {
	switch e {
	case ChangeRequestTypeUnknown:
		return 0
	case ChangeRequestTypeTMTProject:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type JobStatus string

// Enum values for JobStatus
const (
	JobStatusPending   JobStatus = "pending"
	JobStatusFailed    JobStatus = "failed"
	JobStatusCompleted JobStatus = "completed"
)

func AllJobStatus() []JobStatus {
	return []JobStatus{
		JobStatusPending,
		JobStatusFailed,
		JobStatusCompleted,
	}
}

func (e JobStatus) IsValid() error {
	switch e {
	case JobStatusPending, JobStatusFailed, JobStatusCompleted:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e JobStatus) String() string {
	return string(e)
}

func (e JobStatus) Ordinal() int {
	switch e {
	case JobStatusPending:
		return 0
	case JobStatusFailed:
		return 1
	case JobStatusCompleted:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}
